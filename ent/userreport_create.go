// Code generated by ent, DO NOT EDIT.
// @generated

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dev-hato/misskey-abuse-user-report-notifier/ent/userreport"
)

// UserReportCreate is the builder for creating a UserReport entity.
type UserReportCreate struct {
	config
	mutation *UserReportMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (urc *UserReportCreate) SetCreatedAt(t time.Time) *UserReportCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (urc *UserReportCreate) SetNillableCreatedAt(t *time.Time) *UserReportCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetID sets the "id" field.
func (urc *UserReportCreate) SetID(s string) *UserReportCreate {
	urc.mutation.SetID(s)
	return urc
}

// Mutation returns the UserReportMutation object of the builder.
func (urc *UserReportCreate) Mutation() *UserReportMutation {
	return urc.mutation
}

// Save creates the UserReport in the database.
func (urc *UserReportCreate) Save(ctx context.Context) (*UserReport, error) {
	urc.defaults()
	return withHooks(ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserReportCreate) SaveX(ctx context.Context) *UserReport {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserReportCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserReportCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserReportCreate) defaults() {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := userreport.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserReportCreate) check() error {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserReport.created_at"`)}
	}
	return nil
}

func (urc *UserReportCreate) sqlSave(ctx context.Context) (*UserReport, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserReport.ID type: %T", _spec.ID.Value)
		}
	}
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UserReportCreate) createSpec() (*UserReport, *sqlgraph.CreateSpec) {
	var (
		_node = &UserReport{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(userreport.Table, sqlgraph.NewFieldSpec(userreport.FieldID, field.TypeString))
	)
	if id, ok := urc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.SetField(userreport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// UserReportCreateBulk is the builder for creating many UserReport entities in bulk.
type UserReportCreateBulk struct {
	config
	err      error
	builders []*UserReportCreate
}

// Save creates the UserReport entities in the database.
func (urcb *UserReportCreateBulk) Save(ctx context.Context) ([]*UserReport, error) {
	if urcb.err != nil {
		return nil, urcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserReport, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserReportCreateBulk) SaveX(ctx context.Context) []*UserReport {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserReportCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserReportCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
